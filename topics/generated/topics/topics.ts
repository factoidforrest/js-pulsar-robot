// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.20.3
// source: topics/topics.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "topics";

export interface helloWorld {
  message: string;
}

export interface leakSensor {
  isLeaking: boolean;
}

export interface imuData {
  acceleration?: Vector3 | undefined;
  magnetometer?: Vector3 | undefined;
  gyroscope?: Vector3 | undefined;
  orientation?: Quaternion | undefined;
  linearAcceleration?: Vector3 | undefined;
  gravity?: Vector3 | undefined;
  temperature: number;
  calibrationStatus?: imuData_CalibrationStatus | undefined;
}

export interface imuData_CalibrationStatus {
  sys: number;
  gyro: number;
  accel: number;
  mag: number;
}

export interface Vector3 {
  x: number;
  y: number;
  z: number;
}

export interface Quaternion {
  x: number;
  y: number;
  z: number;
  w: number;
}

export interface gpsData {
  timestamp?: number | undefined;
  latitude?: number | undefined;
  longitude?: number | undefined;
  altitude?: number | undefined;
  speed?: number | undefined;
  course?: number | undefined;
  satellites?: number | undefined;
  pdop?:
    | number
    | undefined;
  /** fix is required */
  fix: string;
  linkQuality?: string | undefined;
  dgps: boolean;
}

export interface speedEstimate {
  speed: number;
}

export interface depth {
  depth: number;
}

export interface positionEstimate {
  local?: positionEstimate_State | undefined;
  global?: positionEstimate_GlobalPosition | undefined;
  timestamp: number;
}

export interface positionEstimate_State {
  x: number;
  y: number;
  z: number;
  v: number;
  qw: number;
  qx: number;
  qy: number;
  qz: number;
}

export interface positionEstimate_GlobalPosition {
  latitude: number;
  longitude: number;
  altitude: number;
}

export interface speed {
  speed: number;
}

function createBasehelloWorld(): helloWorld {
  return { message: "" };
}

export const helloWorld: MessageFns<helloWorld> = {
  encode(message: helloWorld, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): helloWorld {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasehelloWorld();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): helloWorld {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: helloWorld): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<helloWorld>, I>>(base?: I): helloWorld {
    return helloWorld.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<helloWorld>, I>>(object: I): helloWorld {
    const message = createBasehelloWorld();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseleakSensor(): leakSensor {
  return { isLeaking: false };
}

export const leakSensor: MessageFns<leakSensor> = {
  encode(message: leakSensor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isLeaking !== false) {
      writer.uint32(8).bool(message.isLeaking);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): leakSensor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseleakSensor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.isLeaking = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): leakSensor {
    return { isLeaking: isSet(object.isLeaking) ? globalThis.Boolean(object.isLeaking) : false };
  },

  toJSON(message: leakSensor): unknown {
    const obj: any = {};
    if (message.isLeaking !== false) {
      obj.isLeaking = message.isLeaking;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<leakSensor>, I>>(base?: I): leakSensor {
    return leakSensor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<leakSensor>, I>>(object: I): leakSensor {
    const message = createBaseleakSensor();
    message.isLeaking = object.isLeaking ?? false;
    return message;
  },
};

function createBaseimuData(): imuData {
  return {
    acceleration: undefined,
    magnetometer: undefined,
    gyroscope: undefined,
    orientation: undefined,
    linearAcceleration: undefined,
    gravity: undefined,
    temperature: 0,
    calibrationStatus: undefined,
  };
}

export const imuData: MessageFns<imuData> = {
  encode(message: imuData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.acceleration !== undefined) {
      Vector3.encode(message.acceleration, writer.uint32(18).fork()).join();
    }
    if (message.magnetometer !== undefined) {
      Vector3.encode(message.magnetometer, writer.uint32(26).fork()).join();
    }
    if (message.gyroscope !== undefined) {
      Vector3.encode(message.gyroscope, writer.uint32(34).fork()).join();
    }
    if (message.orientation !== undefined) {
      Quaternion.encode(message.orientation, writer.uint32(42).fork()).join();
    }
    if (message.linearAcceleration !== undefined) {
      Vector3.encode(message.linearAcceleration, writer.uint32(50).fork()).join();
    }
    if (message.gravity !== undefined) {
      Vector3.encode(message.gravity, writer.uint32(58).fork()).join();
    }
    if (message.temperature !== 0) {
      writer.uint32(65).double(message.temperature);
    }
    if (message.calibrationStatus !== undefined) {
      imuData_CalibrationStatus.encode(message.calibrationStatus, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): imuData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseimuData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.acceleration = Vector3.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.magnetometer = Vector3.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.gyroscope = Vector3.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orientation = Quaternion.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.linearAcceleration = Vector3.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.gravity = Vector3.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 65) {
            break;
          }

          message.temperature = reader.double();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.calibrationStatus = imuData_CalibrationStatus.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): imuData {
    return {
      acceleration: isSet(object.acceleration) ? Vector3.fromJSON(object.acceleration) : undefined,
      magnetometer: isSet(object.magnetometer) ? Vector3.fromJSON(object.magnetometer) : undefined,
      gyroscope: isSet(object.gyroscope) ? Vector3.fromJSON(object.gyroscope) : undefined,
      orientation: isSet(object.orientation) ? Quaternion.fromJSON(object.orientation) : undefined,
      linearAcceleration: isSet(object.linearAcceleration) ? Vector3.fromJSON(object.linearAcceleration) : undefined,
      gravity: isSet(object.gravity) ? Vector3.fromJSON(object.gravity) : undefined,
      temperature: isSet(object.temperature) ? globalThis.Number(object.temperature) : 0,
      calibrationStatus: isSet(object.calibrationStatus)
        ? imuData_CalibrationStatus.fromJSON(object.calibrationStatus)
        : undefined,
    };
  },

  toJSON(message: imuData): unknown {
    const obj: any = {};
    if (message.acceleration !== undefined) {
      obj.acceleration = Vector3.toJSON(message.acceleration);
    }
    if (message.magnetometer !== undefined) {
      obj.magnetometer = Vector3.toJSON(message.magnetometer);
    }
    if (message.gyroscope !== undefined) {
      obj.gyroscope = Vector3.toJSON(message.gyroscope);
    }
    if (message.orientation !== undefined) {
      obj.orientation = Quaternion.toJSON(message.orientation);
    }
    if (message.linearAcceleration !== undefined) {
      obj.linearAcceleration = Vector3.toJSON(message.linearAcceleration);
    }
    if (message.gravity !== undefined) {
      obj.gravity = Vector3.toJSON(message.gravity);
    }
    if (message.temperature !== 0) {
      obj.temperature = message.temperature;
    }
    if (message.calibrationStatus !== undefined) {
      obj.calibrationStatus = imuData_CalibrationStatus.toJSON(message.calibrationStatus);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<imuData>, I>>(base?: I): imuData {
    return imuData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<imuData>, I>>(object: I): imuData {
    const message = createBaseimuData();
    message.acceleration = (object.acceleration !== undefined && object.acceleration !== null)
      ? Vector3.fromPartial(object.acceleration)
      : undefined;
    message.magnetometer = (object.magnetometer !== undefined && object.magnetometer !== null)
      ? Vector3.fromPartial(object.magnetometer)
      : undefined;
    message.gyroscope = (object.gyroscope !== undefined && object.gyroscope !== null)
      ? Vector3.fromPartial(object.gyroscope)
      : undefined;
    message.orientation = (object.orientation !== undefined && object.orientation !== null)
      ? Quaternion.fromPartial(object.orientation)
      : undefined;
    message.linearAcceleration = (object.linearAcceleration !== undefined && object.linearAcceleration !== null)
      ? Vector3.fromPartial(object.linearAcceleration)
      : undefined;
    message.gravity = (object.gravity !== undefined && object.gravity !== null)
      ? Vector3.fromPartial(object.gravity)
      : undefined;
    message.temperature = object.temperature ?? 0;
    message.calibrationStatus = (object.calibrationStatus !== undefined && object.calibrationStatus !== null)
      ? imuData_CalibrationStatus.fromPartial(object.calibrationStatus)
      : undefined;
    return message;
  },
};

function createBaseimuData_CalibrationStatus(): imuData_CalibrationStatus {
  return { sys: 0, gyro: 0, accel: 0, mag: 0 };
}

export const imuData_CalibrationStatus: MessageFns<imuData_CalibrationStatus> = {
  encode(message: imuData_CalibrationStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sys !== 0) {
      writer.uint32(8).uint32(message.sys);
    }
    if (message.gyro !== 0) {
      writer.uint32(16).uint32(message.gyro);
    }
    if (message.accel !== 0) {
      writer.uint32(24).uint32(message.accel);
    }
    if (message.mag !== 0) {
      writer.uint32(32).uint32(message.mag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): imuData_CalibrationStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseimuData_CalibrationStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.sys = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.gyro = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.accel = reader.uint32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.mag = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): imuData_CalibrationStatus {
    return {
      sys: isSet(object.sys) ? globalThis.Number(object.sys) : 0,
      gyro: isSet(object.gyro) ? globalThis.Number(object.gyro) : 0,
      accel: isSet(object.accel) ? globalThis.Number(object.accel) : 0,
      mag: isSet(object.mag) ? globalThis.Number(object.mag) : 0,
    };
  },

  toJSON(message: imuData_CalibrationStatus): unknown {
    const obj: any = {};
    if (message.sys !== 0) {
      obj.sys = Math.round(message.sys);
    }
    if (message.gyro !== 0) {
      obj.gyro = Math.round(message.gyro);
    }
    if (message.accel !== 0) {
      obj.accel = Math.round(message.accel);
    }
    if (message.mag !== 0) {
      obj.mag = Math.round(message.mag);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<imuData_CalibrationStatus>, I>>(base?: I): imuData_CalibrationStatus {
    return imuData_CalibrationStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<imuData_CalibrationStatus>, I>>(object: I): imuData_CalibrationStatus {
    const message = createBaseimuData_CalibrationStatus();
    message.sys = object.sys ?? 0;
    message.gyro = object.gyro ?? 0;
    message.accel = object.accel ?? 0;
    message.mag = object.mag ?? 0;
    return message;
  },
};

function createBaseVector3(): Vector3 {
  return { x: 0, y: 0, z: 0 };
}

export const Vector3: MessageFns<Vector3> = {
  encode(message: Vector3, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(9).double(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(17).double(message.y);
    }
    if (message.z !== 0) {
      writer.uint32(25).double(message.z);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Vector3 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVector3();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.x = reader.double();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.y = reader.double();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.z = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Vector3 {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
      z: isSet(object.z) ? globalThis.Number(object.z) : 0,
    };
  },

  toJSON(message: Vector3): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = message.x;
    }
    if (message.y !== 0) {
      obj.y = message.y;
    }
    if (message.z !== 0) {
      obj.z = message.z;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Vector3>, I>>(base?: I): Vector3 {
    return Vector3.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Vector3>, I>>(object: I): Vector3 {
    const message = createBaseVector3();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.z = object.z ?? 0;
    return message;
  },
};

function createBaseQuaternion(): Quaternion {
  return { x: 0, y: 0, z: 0, w: 0 };
}

export const Quaternion: MessageFns<Quaternion> = {
  encode(message: Quaternion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(9).double(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(17).double(message.y);
    }
    if (message.z !== 0) {
      writer.uint32(25).double(message.z);
    }
    if (message.w !== 0) {
      writer.uint32(33).double(message.w);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Quaternion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuaternion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.x = reader.double();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.y = reader.double();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.z = reader.double();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.w = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Quaternion {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
      z: isSet(object.z) ? globalThis.Number(object.z) : 0,
      w: isSet(object.w) ? globalThis.Number(object.w) : 0,
    };
  },

  toJSON(message: Quaternion): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = message.x;
    }
    if (message.y !== 0) {
      obj.y = message.y;
    }
    if (message.z !== 0) {
      obj.z = message.z;
    }
    if (message.w !== 0) {
      obj.w = message.w;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Quaternion>, I>>(base?: I): Quaternion {
    return Quaternion.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Quaternion>, I>>(object: I): Quaternion {
    const message = createBaseQuaternion();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.z = object.z ?? 0;
    message.w = object.w ?? 0;
    return message;
  },
};

function createBasegpsData(): gpsData {
  return {
    timestamp: undefined,
    latitude: undefined,
    longitude: undefined,
    altitude: undefined,
    speed: undefined,
    course: undefined,
    satellites: undefined,
    pdop: undefined,
    fix: "",
    linkQuality: undefined,
    dgps: false,
  };
}

export const gpsData: MessageFns<gpsData> = {
  encode(message: gpsData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timestamp !== undefined) {
      writer.uint32(9).double(message.timestamp);
    }
    if (message.latitude !== undefined) {
      writer.uint32(17).double(message.latitude);
    }
    if (message.longitude !== undefined) {
      writer.uint32(25).double(message.longitude);
    }
    if (message.altitude !== undefined) {
      writer.uint32(33).double(message.altitude);
    }
    if (message.speed !== undefined) {
      writer.uint32(41).double(message.speed);
    }
    if (message.course !== undefined) {
      writer.uint32(49).double(message.course);
    }
    if (message.satellites !== undefined) {
      writer.uint32(56).int32(message.satellites);
    }
    if (message.pdop !== undefined) {
      writer.uint32(65).double(message.pdop);
    }
    if (message.fix !== "") {
      writer.uint32(74).string(message.fix);
    }
    if (message.linkQuality !== undefined) {
      writer.uint32(82).string(message.linkQuality);
    }
    if (message.dgps !== false) {
      writer.uint32(88).bool(message.dgps);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): gpsData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasegpsData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.timestamp = reader.double();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.latitude = reader.double();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.longitude = reader.double();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.altitude = reader.double();
          continue;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.speed = reader.double();
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }

          message.course = reader.double();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.satellites = reader.int32();
          continue;
        case 8:
          if (tag !== 65) {
            break;
          }

          message.pdop = reader.double();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.fix = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.linkQuality = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.dgps = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): gpsData {
    return {
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : undefined,
      latitude: isSet(object.latitude) ? globalThis.Number(object.latitude) : undefined,
      longitude: isSet(object.longitude) ? globalThis.Number(object.longitude) : undefined,
      altitude: isSet(object.altitude) ? globalThis.Number(object.altitude) : undefined,
      speed: isSet(object.speed) ? globalThis.Number(object.speed) : undefined,
      course: isSet(object.course) ? globalThis.Number(object.course) : undefined,
      satellites: isSet(object.satellites) ? globalThis.Number(object.satellites) : undefined,
      pdop: isSet(object.pdop) ? globalThis.Number(object.pdop) : undefined,
      fix: isSet(object.fix) ? globalThis.String(object.fix) : "",
      linkQuality: isSet(object.linkQuality) ? globalThis.String(object.linkQuality) : undefined,
      dgps: isSet(object.dgps) ? globalThis.Boolean(object.dgps) : false,
    };
  },

  toJSON(message: gpsData): unknown {
    const obj: any = {};
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp;
    }
    if (message.latitude !== undefined) {
      obj.latitude = message.latitude;
    }
    if (message.longitude !== undefined) {
      obj.longitude = message.longitude;
    }
    if (message.altitude !== undefined) {
      obj.altitude = message.altitude;
    }
    if (message.speed !== undefined) {
      obj.speed = message.speed;
    }
    if (message.course !== undefined) {
      obj.course = message.course;
    }
    if (message.satellites !== undefined) {
      obj.satellites = Math.round(message.satellites);
    }
    if (message.pdop !== undefined) {
      obj.pdop = message.pdop;
    }
    if (message.fix !== "") {
      obj.fix = message.fix;
    }
    if (message.linkQuality !== undefined) {
      obj.linkQuality = message.linkQuality;
    }
    if (message.dgps !== false) {
      obj.dgps = message.dgps;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<gpsData>, I>>(base?: I): gpsData {
    return gpsData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<gpsData>, I>>(object: I): gpsData {
    const message = createBasegpsData();
    message.timestamp = object.timestamp ?? undefined;
    message.latitude = object.latitude ?? undefined;
    message.longitude = object.longitude ?? undefined;
    message.altitude = object.altitude ?? undefined;
    message.speed = object.speed ?? undefined;
    message.course = object.course ?? undefined;
    message.satellites = object.satellites ?? undefined;
    message.pdop = object.pdop ?? undefined;
    message.fix = object.fix ?? "";
    message.linkQuality = object.linkQuality ?? undefined;
    message.dgps = object.dgps ?? false;
    return message;
  },
};

function createBasespeedEstimate(): speedEstimate {
  return { speed: 0 };
}

export const speedEstimate: MessageFns<speedEstimate> = {
  encode(message: speedEstimate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.speed !== 0) {
      writer.uint32(9).double(message.speed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): speedEstimate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasespeedEstimate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.speed = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): speedEstimate {
    return { speed: isSet(object.speed) ? globalThis.Number(object.speed) : 0 };
  },

  toJSON(message: speedEstimate): unknown {
    const obj: any = {};
    if (message.speed !== 0) {
      obj.speed = message.speed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<speedEstimate>, I>>(base?: I): speedEstimate {
    return speedEstimate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<speedEstimate>, I>>(object: I): speedEstimate {
    const message = createBasespeedEstimate();
    message.speed = object.speed ?? 0;
    return message;
  },
};

function createBasedepth(): depth {
  return { depth: 0 };
}

export const depth: MessageFns<depth> = {
  encode(message: depth, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.depth !== 0) {
      writer.uint32(9).double(message.depth);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): depth {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasedepth();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.depth = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): depth {
    return { depth: isSet(object.depth) ? globalThis.Number(object.depth) : 0 };
  },

  toJSON(message: depth): unknown {
    const obj: any = {};
    if (message.depth !== 0) {
      obj.depth = message.depth;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<depth>, I>>(base?: I): depth {
    return depth.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<depth>, I>>(object: I): depth {
    const message = createBasedepth();
    message.depth = object.depth ?? 0;
    return message;
  },
};

function createBasepositionEstimate(): positionEstimate {
  return { local: undefined, global: undefined, timestamp: 0 };
}

export const positionEstimate: MessageFns<positionEstimate> = {
  encode(message: positionEstimate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.local !== undefined) {
      positionEstimate_State.encode(message.local, writer.uint32(10).fork()).join();
    }
    if (message.global !== undefined) {
      positionEstimate_GlobalPosition.encode(message.global, writer.uint32(18).fork()).join();
    }
    if (message.timestamp !== 0) {
      writer.uint32(25).double(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): positionEstimate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasepositionEstimate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.local = positionEstimate_State.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.global = positionEstimate_GlobalPosition.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.timestamp = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): positionEstimate {
    return {
      local: isSet(object.local) ? positionEstimate_State.fromJSON(object.local) : undefined,
      global: isSet(object.global) ? positionEstimate_GlobalPosition.fromJSON(object.global) : undefined,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
    };
  },

  toJSON(message: positionEstimate): unknown {
    const obj: any = {};
    if (message.local !== undefined) {
      obj.local = positionEstimate_State.toJSON(message.local);
    }
    if (message.global !== undefined) {
      obj.global = positionEstimate_GlobalPosition.toJSON(message.global);
    }
    if (message.timestamp !== 0) {
      obj.timestamp = message.timestamp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<positionEstimate>, I>>(base?: I): positionEstimate {
    return positionEstimate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<positionEstimate>, I>>(object: I): positionEstimate {
    const message = createBasepositionEstimate();
    message.local = (object.local !== undefined && object.local !== null)
      ? positionEstimate_State.fromPartial(object.local)
      : undefined;
    message.global = (object.global !== undefined && object.global !== null)
      ? positionEstimate_GlobalPosition.fromPartial(object.global)
      : undefined;
    message.timestamp = object.timestamp ?? 0;
    return message;
  },
};

function createBasepositionEstimate_State(): positionEstimate_State {
  return { x: 0, y: 0, z: 0, v: 0, qw: 0, qx: 0, qy: 0, qz: 0 };
}

export const positionEstimate_State: MessageFns<positionEstimate_State> = {
  encode(message: positionEstimate_State, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(9).double(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(17).double(message.y);
    }
    if (message.z !== 0) {
      writer.uint32(25).double(message.z);
    }
    if (message.v !== 0) {
      writer.uint32(33).double(message.v);
    }
    if (message.qw !== 0) {
      writer.uint32(41).double(message.qw);
    }
    if (message.qx !== 0) {
      writer.uint32(49).double(message.qx);
    }
    if (message.qy !== 0) {
      writer.uint32(57).double(message.qy);
    }
    if (message.qz !== 0) {
      writer.uint32(65).double(message.qz);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): positionEstimate_State {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasepositionEstimate_State();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.x = reader.double();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.y = reader.double();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.z = reader.double();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.v = reader.double();
          continue;
        case 5:
          if (tag !== 41) {
            break;
          }

          message.qw = reader.double();
          continue;
        case 6:
          if (tag !== 49) {
            break;
          }

          message.qx = reader.double();
          continue;
        case 7:
          if (tag !== 57) {
            break;
          }

          message.qy = reader.double();
          continue;
        case 8:
          if (tag !== 65) {
            break;
          }

          message.qz = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): positionEstimate_State {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
      z: isSet(object.z) ? globalThis.Number(object.z) : 0,
      v: isSet(object.v) ? globalThis.Number(object.v) : 0,
      qw: isSet(object.qw) ? globalThis.Number(object.qw) : 0,
      qx: isSet(object.qx) ? globalThis.Number(object.qx) : 0,
      qy: isSet(object.qy) ? globalThis.Number(object.qy) : 0,
      qz: isSet(object.qz) ? globalThis.Number(object.qz) : 0,
    };
  },

  toJSON(message: positionEstimate_State): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = message.x;
    }
    if (message.y !== 0) {
      obj.y = message.y;
    }
    if (message.z !== 0) {
      obj.z = message.z;
    }
    if (message.v !== 0) {
      obj.v = message.v;
    }
    if (message.qw !== 0) {
      obj.qw = message.qw;
    }
    if (message.qx !== 0) {
      obj.qx = message.qx;
    }
    if (message.qy !== 0) {
      obj.qy = message.qy;
    }
    if (message.qz !== 0) {
      obj.qz = message.qz;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<positionEstimate_State>, I>>(base?: I): positionEstimate_State {
    return positionEstimate_State.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<positionEstimate_State>, I>>(object: I): positionEstimate_State {
    const message = createBasepositionEstimate_State();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.z = object.z ?? 0;
    message.v = object.v ?? 0;
    message.qw = object.qw ?? 0;
    message.qx = object.qx ?? 0;
    message.qy = object.qy ?? 0;
    message.qz = object.qz ?? 0;
    return message;
  },
};

function createBasepositionEstimate_GlobalPosition(): positionEstimate_GlobalPosition {
  return { latitude: 0, longitude: 0, altitude: 0 };
}

export const positionEstimate_GlobalPosition: MessageFns<positionEstimate_GlobalPosition> = {
  encode(message: positionEstimate_GlobalPosition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.latitude !== 0) {
      writer.uint32(9).double(message.latitude);
    }
    if (message.longitude !== 0) {
      writer.uint32(17).double(message.longitude);
    }
    if (message.altitude !== 0) {
      writer.uint32(25).double(message.altitude);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): positionEstimate_GlobalPosition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasepositionEstimate_GlobalPosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.latitude = reader.double();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.longitude = reader.double();
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.altitude = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): positionEstimate_GlobalPosition {
    return {
      latitude: isSet(object.latitude) ? globalThis.Number(object.latitude) : 0,
      longitude: isSet(object.longitude) ? globalThis.Number(object.longitude) : 0,
      altitude: isSet(object.altitude) ? globalThis.Number(object.altitude) : 0,
    };
  },

  toJSON(message: positionEstimate_GlobalPosition): unknown {
    const obj: any = {};
    if (message.latitude !== 0) {
      obj.latitude = message.latitude;
    }
    if (message.longitude !== 0) {
      obj.longitude = message.longitude;
    }
    if (message.altitude !== 0) {
      obj.altitude = message.altitude;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<positionEstimate_GlobalPosition>, I>>(base?: I): positionEstimate_GlobalPosition {
    return positionEstimate_GlobalPosition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<positionEstimate_GlobalPosition>, I>>(
    object: I,
  ): positionEstimate_GlobalPosition {
    const message = createBasepositionEstimate_GlobalPosition();
    message.latitude = object.latitude ?? 0;
    message.longitude = object.longitude ?? 0;
    message.altitude = object.altitude ?? 0;
    return message;
  },
};

function createBasespeed(): speed {
  return { speed: 0 };
}

export const speed: MessageFns<speed> = {
  encode(message: speed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.speed !== 0) {
      writer.uint32(9).double(message.speed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): speed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasespeed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.speed = reader.double();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): speed {
    return { speed: isSet(object.speed) ? globalThis.Number(object.speed) : 0 };
  },

  toJSON(message: speed): unknown {
    const obj: any = {};
    if (message.speed !== 0) {
      obj.speed = message.speed;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<speed>, I>>(base?: I): speed {
    return speed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<speed>, I>>(object: I): speed {
    const message = createBasespeed();
    message.speed = object.speed ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
